generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url = "***"
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  UNKNOWN
}

enum NotificationEmails {
  ACCOUNT
  UPDATES
  PROMOTIONS
}

enum PrefersColorScheme {
  NO_PREFERENCE
  LIGHT
  DARK
}

enum PrefersReducedMotion {
  NO_PREFERENCE
  REDUCE
}

enum UserRole {
  SUDO
  USER
}

enum MembershipRole {
  OWNER
  ADMIN
  RESELLER
  MEMBER
}

model users {
  checkLocationOnLogin Boolean              @default(false)
  countryCode          String               @default("us")
  createdAt            DateTime             @default(now())
  gender               Gender               @default(UNKNOWN)
  id                   Int                  @id @default(autoincrement())
  name                 String
  nickname             String
  notificationEmails   NotificationEmails   @default(ACCOUNT)
  password             String?
  prefersLanguage      String               @default("en-us")
  prefersColorScheme   PrefersColorScheme   @default(NO_PREFERENCE)
  prefersReducedMotion PrefersReducedMotion @default(NO_PREFERENCE)
  primaryEmail         Int?
  profilePicture       String               @default("https://unavatar.now.sh/fallback.png")
  role                 UserRole             @default(USER)
  timezone             String               @default("America/Los_Angeles")
  twoFactorEnabled     Boolean              @default(false)
  twoFactorSecret      String?
  updatedAt            DateTime             @updatedAt
  username             String               @unique
  emails               emails[]             @relation(name: "emails")
  access_tokens        access_tokens[]      @relation(name: "accessTokens")
  approved_locations   approved_locations[] @relation(name: "approvedLocations")
  backup_codes         backup_codes[]       @relation(name: "backupCodes")
  identities           identities[]         @relation(name: "identities")
  memberships          memberships[]        @relation(name: "userMemberships")
  sessions             sessions[]           @relation(name: "sessions")
}

model organizations {
  autoJoinDomain   Boolean       @default(false)
  createdAt        DateTime      @default(now())
  forceTwoFactor   Boolean       @default(false)
  id               Int           @id @default(autoincrement())
  ipRestrictions   String?
  name             String
  onlyAllowDomain  Boolean       @default(false)
  profilePicture   String        @default("https://unavatar.now.sh/fallback.png")
  stripeCustomerId String?
  updatedAt        DateTime      @updatedAt
  username         String        @unique
  api_keys         api_keys[]    @relation(name: "apiKeys")
  domains          domains[]     @relation(name: "domains")
  memberships      memberships[] @relation(name: "organizationMemberships")
  webhooks         webhooks[]    @relation(name: "webhooks")
}

model emails {
  createdAt  DateTime @default(now())
  email      String
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  user       users    @relation(fields: [userId], references: [id])
  userId     Int

  @@index([userId], name: "userId")
}

model access_tokens {
  createdAt      DateTime @default(now())
  description    String?
  expiresAt      DateTime
  id             Int      @id @default(autoincrement())
  jwtAccessToken String
  name           String?
  scopes         String?
  updatedAt      DateTime @updatedAt
  user           users    @relation(fields: [userId], references: [id])
  userId         Int

  @@index([userId], name: "userId")
  @@map("access-tokens")
}

model api_keys {
  createdAt            DateTime      @default(now())
  description          String?
  expiresAt            DateTime
  id                   Int           @id @default(autoincrement())
  ipRestrictions       String?
  jwtApiKey            String
  name                 String?
  organization         organizations @relation(fields: [organizationId], references: [id])
  organizationId       Int
  referrerRestrictions String?
  scopes               String?
  updatedAt            DateTime      @updatedAt

  @@map("api-keys")
}

model approved_locations {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  subnet    String
  user      users    @relation(fields: [userId], references: [id])
  userId    Int

  @@map("approved-locations")
}

model backup_codes {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isUsed    Boolean  @default(false)
  user      users    @relation(fields: [userId], references: [id])
  userId    Int

  @@index([userId], name: "userId")
  @@map("backup-codes")
}

model domains {
  createdAt        DateTime      @default(now())
  domain           String
  id               Int           @id @default(autoincrement())
  isVerified       Boolean       @default(false)
  organization     organizations @relation(fields: [organizationId], references: [id])
  organizationId   Int
  updatedAt        DateTime      @updatedAt
  verificationCode String

  @@index([organizationId], name: "organizationId")
}

model identities {
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  identityId String
  loginName  String
  type       String
  updatedAt  DateTime @updatedAt
  user       users    @relation(fields: [userId], references: [id])
  userId     Int

  @@index([userId], name: "userId")
}

model memberships {
  createdAt      DateTime       @default(now())
  id             Int            @id @default(autoincrement())
  organization   organizations  @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           MembershipRole @default(MEMBER)
  updatedAt      DateTime       @updatedAt
  user           users          @relation(fields: [userId], references: [id])
  userId         Int

  @@index([organizationId], name: "organizationId")
  @@index([userId], name: "userId")
}

model sessions {
  createdAt   DateTime @default(now())
  id          Int      @id @default(autoincrement())
  ipAddress   String
  jwtToken    String
  updatedAt   DateTime @updatedAt
  userAgent   String
  city        String?
  region      String?
  timezone    String?
  countryCode String?
  user        users    @relation(fields: [userId], references: [id])
  userId      Int

  @@index([userId], name: "userId")
}

model webhooks {
  contentType    String        @default("application/json")
  createdAt      DateTime      @default(now())
  event          String
  id             Int           @id @default(autoincrement())
  isActive       Boolean       @default(false)
  lastFiredAt    DateTime?
  organization   organizations @relation(fields: [organizationId], references: [id])
  organizationId Int
  secret         String?
  updatedAt      DateTime      @updatedAt
  url            String

  @@index([organizationId], name: "organizationId")
}
